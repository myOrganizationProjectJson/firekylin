{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/system.js"
    ],
    "names": [],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,kBAAQ,QAAR,CAAiB;AACf,WAAS,IADM;AAEf,aAAW,KAFI;AAGf,sBAAoB;AAHL,CAAjB;AAKA,IAAI,SAAS,SAAT,MAAS;AAAA,SAAO,sBAAY,UAAC,OAAD,EAAU,MAAV;AAAA,WAAqB,kBAAQ,GAAR,CAAY,GAAZ,EAAiB,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX;AAAA,aAAoB,MAAM,OAAO,GAAP,CAAN,GAAoB,QAAQ,IAAR,CAAxC;AAAA,KAAjB,CAArB;AAAA,GAAZ,CAAP;AAAA,CAAb;;;;;;;;;;mBAIE,I,iBAAK,I,EAAM;AACT,oBAAM,IAAN,YAAW,IAAX;;AAEA,SAAK,aAAL,GAAqB,KAAK,KAAL,CAAW,SAAX,CAArB;AACD,G;;mBAEK,S;;UACA,U,EAEE,a,EAQF,K,EACA,I,EAUA,K;;;;;AArBA,wB,GAAa,K;;;qBAEW,OAAO,sCAAP,C;;;AAAtB,2B;;AACJ,kBAAI,iBAAO,EAAP,CAAU,aAAV,EAAyB,kBAAK,OAA9B,CAAJ,EAA6C;AAC3C,6BAAa,aAAb;AACD;;;;;;;;AAED,sBAAQ,GAAR;;;;qBAGgB,KAAK,aAAL,CAAmB,KAAnB,CAAyB,6BAAzB,C;;;AAAd,mB;AACA,kB,GAAO;AACT,6BAAa,QAAQ,QAAR,CAAiB,IADrB;AAET,2BAAW,QAAQ,QAAR,CAAiB,EAFnB;AAGT,0BAAU,QAAQ,QAHT;AAIT,gCAAgB,MAAM,OAJb;AAKT,kCAAkB,kBAAK,OALd;AAMT,8BAAc,MAAM,CAAN,EAAS,OANd;AAOT;AAPS,e;;;AAUP,mB,GAAQ,KAAK,QAAL,CAAc,IAAd,KAAuB,CAAvB,GAA2B,EAAC,SAAS,KAAK,QAAL,CAAc,EAAxB,EAA3B,GAAyD,E;4BAC9D,I;4BACK,I;;qBACI,KAAK,SAAL,E;;;;;qBAEC,KAAK,KAAL,CAAW,MAAX,EAAmB,KAAnB,CAAyB,KAAzB,EAAgC,KAAhC,E;;;;;qBACA,KAAK,KAAL,CAAW,MAAX,EAAmB,KAAnB,E;;;;;qBACG,KAAK,KAAL,CAAW,MAAX,EAAmB,KAAnB,CAAyB,KAAzB,EAAgC,GAAhC,CAAoC,aAApC,C;;;;;AAFhB,qB;AACA,qB;AACA,wB;;;AALF,wB;AACA,sB;AACA,qB;;2DAHU,O;;;;;;;;;;;;;;;;;mBAYR,S;;UACA,K,EACA,U;;;;;;qBADc,KAAK,aAAL,CAAmB,MAAnB,E;;;AAAd,mB;AACA,wB,GAAa,E;;;AAEjB,oBAAM,OAAN,CAAc;AAAA,uBAAQ,WAAW,KAAK,GAAhB,IAAuB,KAAK,KAApC;AAAA,eAAd;;gDAEO,U",
    "file": "../../../../src/admin/controller/api/system.js",
    "sourcesContent": [
        "import moment from 'moment';\n\nimport base from './base';\nimport pack from '../../../../package.json';\nimport request from 'request';\nimport semver from 'semver';\nrequest.defaults({\n  timeout: 1000,\n  strictSSL: false,\n  rejectUnauthorized: false\n});\nlet reqIns = url => new Promise((resolve, reject) => request.get(url, (err, res, body) => err ? reject(res) : resolve(body)));\n\nexport default class extends base {\n\n  init(http) {\n    super.init(http);\n\n    this.modelInstance = this.model('options');\n  }\n\n  async getAction() {\n    let needUpdate = false;\n    try {\n      let onlineVersion = await reqIns('http://firekylin.org/release/.latest');\n      if( semver.gt(onlineVersion, pack.version) ) {\n        needUpdate = onlineVersion;\n      }\n    } catch(e) {\n      console.log(e);\n    }\n\n    let mysql = await this.modelInstance.query('SELECT VERSION() as version');\n    let data = {\n      nodeVersion: process.versions.node,\n      v8Version: process.versions.v8,\n      platform: process.platform,\n      thinkjsVersion: think.version,\n      firekylinVersion: pack.version,\n      mysqlVersion: mysql[0].version,\n      needUpdate\n    };\n    //非管理员只统计当前用户文章\n    let where = this.userInfo.type !== 1 ? {user_id: this.userInfo.id} : {};\n    return this.success({\n      versions: data,\n      config: await this.getConfig(),\n      count: {\n        posts: await this.model('post').where(where).count(),\n        cates: await this.model('cate').count(),\n        comments: await this.model('post').where(where).sum('comment_num')\n      }\n    });\n  }\n\n\n  async getConfig() {\n    let items = await this.modelInstance.select();\n    let siteConfig = {};\n\n    items.forEach(item => siteConfig[item.key] = item.value);\n\n    return siteConfig;\n  }\n\n}\n"
    ]
}